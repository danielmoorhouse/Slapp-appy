@model SlappMain.Models.Review

@{
    ViewBag.Title = "Edit";
}
<script type="text/javascript">
    $(document).ready(function () {

        //for each of the rating dropdowns
        $('.Rating').each(function () {
            //get the value of the id from the hidden field
            //next to it
            var selectedId = $(this).next().val();
            //now apply this as the selected id to the current
            //dropdown box
            $(this).val(selectedId);
        });

        //now apply the plug-in and set to read only
        $('.Rating').barrating({
            theme: 'fontawesome-stars',
            readonly: true
        });
    });
</script>

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Review</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.RevId)

        <div class="form-group">
            @Html.LabelFor(model => model.AppId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
             <input type="hidden" name="AppId" value="@ViewBag.AppId" />
                @ViewBag.AppName
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RevUname, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RevUname, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RevUname, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ReviewContent, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ReviewContent, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ReviewContent, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ReviewRating, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="Rating">
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                </select>
                <input type="hidden" class="initialRating" value="@Model.ReviewRating" />

                @Html.ValidationMessageFor(model => model.ReviewRating, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
